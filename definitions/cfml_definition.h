#pragma once

#include"textparser.h"
#include <stddef.h>


enum text_parser_cfml_tags {
    TextParser_cfml_ScriptTag,
    TextParser_cfml_OutputTag,
    TextParser_cfml_StartTag,
    TextParser_cfml_EndTag,
    TextParser_cfml_Comment,
    TextParser_cfml_SingleString,
    TextParser_cfml_DoubleString,
    TextParser_cfml_SingleChar,
    TextParser_cfml_DoubleChar,
    TextParser_cfml_SharpChar,

    TextParser_cfml_SharpExpression,
    TextParser_cfml_Expression,
    TextParser_cfml_ScriptExpression,
    TextParser_cfml_OutputExpression,
    TextParser_cfml_ScriptBlockComment,
    TextParser_cfml_ScriptLineComment,
    TextParser_cfml_ExpressionEnd,
    TextParser_cfml_Number,
    TextParser_cfml_Boolean,
    TextParser_cfml_ObjectMember,

    TextParser_cfml_Function,
    TextParser_cfml_Separator,
    TextParser_cfml_Variable,
    TextParser_cfml_Object,
    TextParser_cfml_Assigment,
    TextParser_cfml_Operator,
    TextParser_cfml_SubExpression,
    TextParser_cfml_VariableIndex,
    TextParser_cfml_CodeBlock,
    TextParser_cfml_Keyword,
};

static const language_definition cfml_definition = {
    .name = "ColdFusion",
    .empty_segment_language = "html",
    .case_sensitivity = false,
    .default_file_extensions = (const char *[]) {"cfm", "cfc", NULL},
    .default_text_encoding = TEXTPARSE_LATIN_1,
    .starts_with = (int []) {TextParser_cfml_ScriptTag,
                             TextParser_cfml_OutputTag,
                             TextParser_cfml_StartTag,
                             TextParser_cfml_EndTag,
                             TextParser_cfml_Comment,
                             TextParser_END},
    .tokens = (textparse_token[]) {
        {.name = "ScriptTag", .start_string = "<cfscript>", .end_string = "</cfscript>", .multi_line = true, .search_end_tag_first = true,
            .nested_tokens = (int []) {TextParser_cfml_ScriptExpression,
                                       TextParser_END}
        },
        {.name = "OutputTag", .start_string = "<cfoutput>", .end_string = "</cfoutput>", .multi_line = true, .search_end_tag_first = true,
            .nested_tokens = (int []) {TextParser_cfml_OutputExpression,
                                       TextParser_END}
        },
        {.name = "StartTag", .start_string = "<cf[a-z0-9_]+", .end_string = "\\/?>", .only_start_tag = false, .multi_line = true,
            .nested_tokens = (int []) {TextParser_cfml_Expression,
                                       TextParser_END}
        },
        {.name = "EndTag", .start_string = "</cf", .end_string = ">", .only_start_tag = false, .multi_line = true },
        {.name = "Comment", .start_string = "<!---", .end_string = "--->", .only_start_tag = false, .multi_line = true,
            .nested_tokens = (int []) {TextParser_cfml_Comment,
                                       TextParser_END}
        },
        {.name = "SingleString", .start_string = "'", .end_string = "'", .only_start_tag = false, .multi_line = false,
            .nested_tokens = (int []) {TextParser_cfml_SharpChar,
                                       TextParser_cfml_SharpExpression,
                                       TextParser_cfml_SingleChar,
                                       TextParser_END}
        },
        {.name = "DoubleString", .start_string = "\"", .end_string = "\"", .only_start_tag = false, .multi_line = false,
            .nested_tokens = (int []) {TextParser_cfml_SharpChar,
                                       TextParser_cfml_SharpExpression,
                                       TextParser_cfml_DoubleChar,
                                       TextParser_END}
        },
        {.name = "SingleChar", .start_string = "''", .end_string = "", .only_start_tag = true, .multi_line = false },
        {.name = "DoubleChar", .start_string = "\"\"", .end_string = "", .only_start_tag = true, .multi_line = false },
        {.name = "SharpChar", .start_string = "##", .end_string = "", .only_start_tag = true, .multi_line = false },
        ////////////////////////////////
        {.name = "SharpExpression", .start_string = "#", .end_string = "#", .multi_line = true, .search_end_tag_first = true,
            .nested_tokens = (int []) {TextParser_cfml_Expression,
                                       TextParser_END}
        },
        {.name = "Expression", .start_string = "", .end_string = "", .only_start_tag = false, .multi_line = true, .ignore_if_only_one_child = true,
            .nested_tokens = (int []) {TextParser_cfml_SingleString,
                                       TextParser_cfml_DoubleString,
                                       TextParser_cfml_Separator,
                                       TextParser_cfml_ScriptLineComment,
                                       TextParser_cfml_ScriptBlockComment,
                                       TextParser_cfml_ExpressionEnd,
                                       TextParser_cfml_Number,
                                       TextParser_cfml_Boolean,
                                       TextParser_cfml_Operator,
                                       TextParser_cfml_ObjectMember,
                                       TextParser_cfml_Keyword,
                                       TextParser_cfml_Function,
                                       TextParser_cfml_Object,
                                       TextParser_cfml_Variable,
                                       TextParser_cfml_SubExpression,
                                       TextParser_cfml_VariableIndex,
                                       TextParser_END}
        },
        {.name = "ScriptExpression", .start_string = "", .end_string = "", .only_start_tag = false, .multi_line = true,
            .nested_tokens = (int []) {TextParser_cfml_SingleString,
                                       TextParser_cfml_DoubleString,
                                       TextParser_cfml_Separator,
                                       TextParser_cfml_CodeBlock,
                                       TextParser_cfml_ScriptLineComment,
                                       TextParser_cfml_ScriptBlockComment,
                                       TextParser_cfml_ExpressionEnd,
                                       TextParser_cfml_Number,
                                       TextParser_cfml_Boolean,
                                       TextParser_cfml_Operator,
                                       TextParser_cfml_ObjectMember,
                                       TextParser_cfml_Keyword,
                                       TextParser_cfml_Function,
                                       TextParser_cfml_Object,
                                       TextParser_cfml_Variable,
                                       TextParser_cfml_SubExpression,
                                       TextParser_cfml_VariableIndex,
                                       TextParser_END}
        },
        {.name = "OutputExpression", .start_string = "", .end_string = "", .multi_line = true,
            .nested_tokens = (int []) {TextParser_cfml_StartTag,
                                       TextParser_cfml_EndTag,
                                       TextParser_cfml_Comment,
                                       TextParser_cfml_SharpExpression,
                                       TextParser_END}
        },
        {.name = "ScriptBlockComment", .start_string = "/\\*", .end_string = "\\*/", .multi_line = true },
        {.name = "ScriptLineComment", .start_string = "//.*" },
        {.name = "ExpressionEnd", .start_string = ";" },
        {.name = "Number", .start_string = "[-+]?\\b[0-9]*\\.?[0-9]+\\b" },
        {.name = "Boolean", .start_string = "(\\btrue\\b|\\bfalse\\b|\\byes\\b|\\bno\\b)" },
        {.name = "ObjectMember", .start_string = "\\." },
        ////////////////////////////////
        {.name = "Function", .start_string = "[a-z_]+[a-z0-9_]*[ \\t]*\\(", .end_string = "\\)",
            .nested_tokens = (int []) {TextParser_cfml_Expression,
                                       TextParser_END}
        },
        {.name = "Separator", .start_string = "," },
        {.name = "Variable", .start_string = "[a-z_]+[a-z0-9_]*" },
        {.name = "Object", .start_string = "[a-z_]+[a-z0-9_]*\\." },
        {.name = "Assigment", .start_string = "(=|\\+=|\\-=|\\*=|/=|%=|&=)" },
        {.name = "Operator", .start_string = "(\\bgreater\\s+than\\s+or\\s+equal\\s+to\\b|\\bless\\s+than\\s+or\\s+equal\\s+to\\b|\\bdoes\\s+not\\s+contain\\b|\\bgreater\\s+than\\b|\\bnot\\s+equal\\b|\\bless\\s+than\\b|\\bcontains\\b|\\bis\\s+not\\b|\\bequal\\b|\\+\\+|\\bmod\\b|\\bnot\\b|\\band\\b|\\bxor\\b|\\beqv\\b|\\bgte\\b|\\blte\\b|\\bimp\\b|\\bneq\\b|\\bis\\b|\\bor\\b|\\bgt\\b|\\bge\\b|\\blt\\b|\\ble\\b|--|\\+|\\*|\\|\\^|&&|\\|\\|\\beq\\b|\\?|-|/|&|%|:|!|=)" },
        {.name = "SubExpression", .start_string = "\\(", .end_string = "\\)",
            .nested_tokens = (int []) {TextParser_cfml_Expression,
                                       TextParser_END}
        },
        {.name = "VariableIndex", .start_string = "\\[", .end_string = "\\]",
            .nested_tokens = (int []) {TextParser_cfml_Expression,
                                       TextParser_END}
        },
        {.name = "CodeBlock", .start_string = "\\{", .end_string = "\\}",
            .nested_tokens = (int []) {TextParser_cfml_ScriptExpression,
                                       TextParser_END}
        },
        {.name = "Keyword", .start_string = "(\\bvar\\b|\\bfunction\\b|\\bthis\\b|try\\b|\\bcatch\\b|\\bif\\b|\\bthen\\b|\\belse\\b)" },
        ////////////////////////////////
        {.name = NULL},
    },
};
