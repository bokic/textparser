{
   "name":"cfml",
   "version":1.0,
   "caseSensitivity":false,
   "defaultFileExtensions":[
      "cfm",
      "cfc"
   ],
   "otherTextInside":true,
   "defaultTextEncoding":"Latin1",
   "startTokens":[
      "ScriptTagPair",
      "OutputTagPair",
      "QueryTagPair",
      "LoopTagPair",
      "StartTag",
      "EndTag",
      "Comment"
   ],
   "tokens":{
      "ScriptTagPair":{
         "type":"GroupAllChildrenInSameOrder",
         "multiLine":true,
         "nestedTokens":[
            "ScriptStartTag",
            "ScriptExpression",
            "ScriptEndTag"
         ]
      },
      "ScriptStartTag":{
         "type":"StartStop",
         "startRegex":"<cfscript(?=[\\>\\s])",
         "endRegex":"\\/?>",
         "multiLine":true,
         "nestedTokens":[
            "Expression"
         ]
      },
      "ScriptEndTag":{
         "type":"SimpleToken",
         "startRegex":"<\\/cfscript>"
      },
      "OutputTagPair":{
         "type":"GroupAllChildrenInSameOrder",
         "multiLine":true,
         "nestedTokens":[
            "OutputStartTag",
            "OutputExpression",
            "OutputEndTag"
         ]
      },
      "OutputStartTag":{
         "type":"StartStop",
         "startRegex":"<cfoutput(?=[\\>\\s])",
         "endRegex":"\\/?>",
         "multiLine":true,
         "nestedTokens":[
            "Expression"
         ]
      },
      "OutputEndTag":{
         "type":"SimpleToken",
         "startRegex":"<\\/cfoutput>"
      },
      "QueryTagPair":{
         "type":"GroupAllChildrenInSameOrder",
         "multiLine":true,
         "nestedTokens":[
            "QueryStartTag",
            "QueryExpression",
            "QueryEndTag"
         ]
      },
      "QueryStartTag":{
         "type":"StartStop",
         "startRegex":"<cfquery(?=[\\>\\s])",
         "endRegex":"\\/?>",
         "multiLine":true,
         "nestedTokens":[
            "Expression"
         ]
      },
      "QueryEndTag":{
         "type":"SimpleToken",
         "startRegex":"<\\/cfquery>"
      },
      "LoopTagPair":{
         "type":"GroupAllChildrenInSameOrder",
         "multiLine":true,
         "nestedTokens":[
            "LoopStartTag",
            "LoopExpression",
            "LoopEndTag"
         ]
      },
      "LoopStartTag":{
         "type":"StartStop",
         "startRegex":"<cfloop(?=[\\>\\s])",
         "endRegex":"\\/?>",
         "multiLine":true,
         "nestedTokens":[
            "Expression"
         ]
      },
      "LoopEndTag":{
         "type":"SimpleToken",
         "startRegex":"<\\/cfloop>"
      },
      "StartTag":{
         "type":"StartStop",
         "startRegex":"<cf[a-z0-9_]+",
         "endRegex":"\\/?>",
         "multiLine":true,
         "nestedTokens":[
            "Expression"
         ]
      },
      "EndTag":{
         "type":"StartStop",
         "startRegex":"<\\/cf(?!output)(?!script)(?!query)(?!loop)[a-z0-9_]+",
         "endRegex":"\\/?>",
         "multiLine":true,
         "nestedTokens":[
            "Expression"
         ]
      },
      "Comment":{
         "type":"StartStop",
         "startRegex":"<!---",
         "endRegex":"--->",
         "multiLine":true,
         "nestedTokens":[
            "Comment"
         ]
      },
      "SingleString":{
         "type":"StartStop",
         "startRegex":"'",
         "endRegex":"'",
         "multiLine":true,
         "nestedTokens":[
            "SharpChar",
            "SharpExpression",
            "SingleChar"
         ]
      },
      "DoubleString":{
         "type":"StartStop",
         "startRegex":"\"",
         "endRegex":"\"",
         "multiLine":true,
         "nestedTokens":[
            "SharpChar",
            "SharpExpression",
            "SingleChar"
         ]
      },
      "SingleChar":{
         "type":"SimpleToken",
         "startRegex":"''"
      },
      "DoubleChar":{
         "type":"SimpleToken",
         "startRegex":"\"\""
      },
      "SharpChar":{
         "type":"SimpleToken",
         "startRegex":"##"
      },
      "SharpExpression":{
         "type":"StartStop",
         "startRegex":"#",
         "endRegex":"#",
         "multiLine":true,
         "nestedTokens":[
            "Expression",
            "ExpressionEnd"
         ]
      },
      "Expression":{
         "type":"Group",
         "multiLine":true,
         "nestedTokens":[
            "SingleString",
            "DoubleString",
            "SharpChar",
            "SharpExpression",
            "Separator",
            "ScriptLineComment",
            "ScriptBlockComment",
            "ExpressionEnd",
            "Number",
            "Boolean",
            "Function",
            "Operator",
            "ObjectMember",
            "Keyword",
            "Object",
            "Assigment",
            "Variable",
            "SubExpression",
            "VariableIndex",
            "CodeBlock"
         ]
      },
      "ScriptExpression":{
         "type":"Group",
         "multiLine":true,
         "nestedTokens":[
            "SingleString",
            "DoubleString",
            "SharpChar",
            "SharpExpression",
            "Separator",
            "CodeBlock",
            "ScriptLineComment",
            "ScriptBlockComment",
            "ExpressionEnd",
            "Number",
            "Boolean",
            "Function",
            "Operator",
            "ObjectMember",
            "Keyword",
            "Object",
            "Assigment",
            "Variable",
            "SubExpression",
            "VariableIndex",
            "CodeBlock"
         ]
      },
      "OutputExpression":{
         "type":"Group",
         "otherTextInside":true,
         "multiLine":true,
         "nestedTokens":[
            "ScriptTagPair",
            "OutputTagPair",
            "QueryTagPair",
            "LoopTagPair",
            "StartTag",
            "EndTag",
            "Comment",
            "SharpChar",
            "SharpExpression"
         ]
      },
      "QueryExpression":{
         "type":"Group",
         "otherTextInside":true,
         "multiLine":true,
         "nestedTokens":[
            "ScriptTagPair",
            "OutputTagPair",
            "QueryTagPair",
            "LoopTagPair",
            "StartTag",
            "EndTag",
            "Comment",
            "SharpChar",
            "SharpExpression"
         ]
      },
      "LoopExpression":{
         "type":"Group",
         "otherTextInside":true,
         "multiLine":true,
         "nestedTokens":[
            "ScriptTagPair",
            "OutputTagPair",
            "QueryTagPair",
            "LoopTagPair",
            "StartTag",
            "EndTag",
            "Comment",
            "SharpChar",
            "SharpExpression"
         ]
      },
      "ScriptBlockComment":{
         "type":"StartStop",
         "startRegex":"\\/\\*",
         "endRegex":"\\*\\/",
         "otherTextInside":true,
         "multiLine":true
      },
      "ScriptLineComment":{
         "type":"SimpleToken",
         "startRegex":"\\/\\/.*"
      },
      "ExpressionEnd":{
         "type":"SimpleToken",
         "startRegex":";"
      },
      "Number":{
         "type":"SimpleToken",
         "startRegex":"[-+]?[0-9]*\\.?[0-9]*"
      },
      "Boolean":{
         "type":"SimpleToken",
         "startRegex":"true\\b|false\\b|yes\\b|no\\b"
      },
      "ObjectMember":{
         "type":"SimpleToken",
         "startRegex":"\\."
      },
      "Function":{
         "type":"StartStop",
         "startRegex":"[a-z_]+[a-z0-9_]*[\\s]*\\(",
         "endRegex":"\\)",
         "multiLine":true,
         "nestedTokens":[
            "Expression"
         ]
      },
      "Separator":{
         "type":"SimpleToken",
         "startRegex":","
      },
      "Variable":{
         "type":"SimpleToken",
         "startRegex":"[a-z_]+[a-z0-9_]*"
      },
      "Object":{
         "type":"SimpleToken",
         "startRegex":"[a-z_]+[a-z0-9_]*\\."
      },
      "Assigment":{
         "type":"SimpleToken",
         "startRegex":"=|\\+=|\\-=|\\*=|\\/=|%=|&="
      },
      "Operator":{
         "type":"SimpleToken",
         "startRegex":""
      },
      "SubExpression":{
         "type":"StartStop",
         "startRegex":"\\(",
         "endRegex":"\\)",
         "nestedTokens":[
            "Expression"
         ]
      },
      "VariableIndex":{
         "type":"StartStop",
         "startRegex":"\\[",
         "endRegex":"\\]",
         "nestedTokens":[
            "Expression"
         ]
      },
      "CodeBlock":{
         "type":"StartStop",
         "startRegex":"\\{",
         "endRegex":"\\}",
         "nestedTokens":[
            "ScriptExpression"
         ]
      },
      "Keyword":{
         "type":"SimpleToken",
         "startRegex":"var\\b|function\\b|this\\b|try\\b|catch\\b|if\\b|then\\b|else\\b"
      }
   }
}
